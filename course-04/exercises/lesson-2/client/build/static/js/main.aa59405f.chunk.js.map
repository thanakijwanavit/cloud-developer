{"version":3,"sources":["components/Group.tsx","config.ts","api/groups-api.ts","components/GroupsList.tsx","components/NotFound.tsx","components/CreateGroup.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Group","_React$PureComponent","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","react","Card","Content","Header","props","group","name","Description","description","React","apiEndpoint","getGroups","_getGroups","_callee","response","result","regenerator_default","a","wrap","_context","prev","next","console","log","fetch","concat","sent","json","abrupt","items","stop","createGroup","_x","_createGroup","_callee2","newGroup","reply","_context2","method","headers","Content-Type","body","JSON","stringify","newItem","GroupsList","_getPrototypeOf2","_this","_len","length","args","Array","_key","call","state","groups","handleCreateGroup","history","push","_componentDidMount","asyncToGenerator","mark","setState","t0","alert","message","Button","primary","size","className","onClick","Divider","clearing","map","Group_Group","id","NotFound","CreateGroup","uploadingGroup","handleNameChange","event","target","handleDescriptionChange","handleSubmit","_ref","preventDefault","setUploadState","finish","Form","onSubmit","Field","placeholder","onChange","renderButton","loading","type","App","react_default","createElement","Segment","style","padding","vertical","Grid","container","stackable","verticalAlign","Row","Column","width","react_router_dom","generateMenu","generateCurrentPage","Menu","Item","to","react_router","path","exact","component","Component","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qRAWaA,EAAb,SAAAC,GAAA,SAAAD,IAAA,OAAAE,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GAAAE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAAF,EAAAC,GAAAC,OAAAQ,EAAA,EAAAR,CAAAF,EAAA,EAAAW,IAAA,SAAAC,MAAA,WAGI,OACEC,EAAA,cAACC,EAAA,EAAD,KACED,EAAA,cAACC,EAAA,EAAKC,QAAN,KACEF,EAAA,cAACC,EAAA,EAAKE,OAAN,KACGZ,KAAKa,MAAMC,MAAMC,MAEpBN,EAAA,cAACC,EAAA,EAAKM,YAAN,KAAmBhB,KAAKa,MAAMC,MAAMG,mBAT9CrB,EAAA,CAA2BsB,iBCXdC,EAAc,oECIpB,SAAeC,IAAtB,OAAAC,EAAAlB,MAAAH,KAAAI,sDAAO,SAAAkB,IAAA,IAAAC,EAAAC,EAAA,OAAAC,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACLC,QAAQC,IAAI,mBADPJ,EAAAE,KAAA,EAGkBG,MAAK,GAAAC,OAAIf,EAAJ,YAHvB,cAGCI,EAHDK,EAAAO,KAAAP,EAAAE,KAAA,EAIgBP,EAASa,OAJzB,cAICZ,EAJDI,EAAAO,KAAAP,EAAAS,OAAA,SAMEb,EAAOc,OANT,wBAAAV,EAAAW,SAAAjB,6BASA,SAAekB,EAAtBC,GAAA,OAAAC,EAAAvC,MAAAH,KAAAI,sDAAO,SAAAuC,EAA2BC,GAA3B,IAAAC,EAAArB,EAAA,OAAAC,EAAAC,EAAAC,KAAA,SAAAmB,GAAA,cAAAA,EAAAjB,KAAAiB,EAAAhB,MAAA,cAAAgB,EAAAhB,KAAA,EAEeG,MAAK,GAAAC,OAAIf,EAAJ,WAA0B,CACjD4B,OAAQ,OACRC,QAAS,CACPC,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBrC,KAAM6B,EAAS7B,KACfE,YAAa2B,EAAS3B,gBATrB,cAEC4B,EAFDC,EAAAX,KAAAW,EAAAhB,KAAA,EAYgBe,EAAMT,OAZtB,cAYCZ,EAZDsB,EAAAX,KAAAW,EAAAT,OAAA,SAaEb,EAAO6B,SAbT,wBAAAP,EAAAP,SAAAI,mDCEMW,EAAb,SAAAzD,GAAA,SAAAyD,IAAA,IAAAC,EAAAC,EAAA1D,OAAAC,EAAA,EAAAD,CAAAE,KAAAsD,GAAA,QAAAG,EAAArD,UAAAsD,OAAAC,EAAA,IAAAC,MAAAH,GAAAI,EAAA,EAAAA,EAAAJ,EAAAI,IAAAF,EAAAE,GAAAzD,UAAAyD,GAAA,OAAAL,EAAA1D,OAAAG,EAAA,EAAAH,CAAAE,MAAAuD,EAAAzD,OAAAI,EAAA,EAAAJ,CAAAwD,IAAAQ,KAAA3D,MAAAoD,EAAA,CAAAvD,MAAAkC,OAAAyB,MACEI,MAAyB,CACvBC,OAAQ,IAFZR,EAKES,kBAAoB,WAClBT,EAAK3C,MAAMqD,QAAQC,KAAnB,mBANJX,EAAA,OAAA1D,OAAAO,EAAA,EAAAP,CAAAwD,EAAAzD,GAAAC,OAAAQ,EAAA,EAAAR,CAAAwD,EAAA,EAAA/C,IAAA,oBAAAC,MAAA,eAAA4D,EAAAtE,OAAAuE,EAAA,EAAAvE,CAAA2B,EAAAC,EAAA4C,KAAA,SAAAhD,IAAA,IAAA0C,EAAA,OAAAvC,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAW2BV,IAX3B,OAWY4C,EAXZpC,EAAAO,KAYMnC,KAAKuE,SAAS,CACZP,WAbRpC,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAA4C,GAAA5C,EAAA,SAgBM6C,MAAK,2BAAAvC,OAA4BN,EAAA4C,GAAEE,UAhBzC,yBAAA9C,EAAAW,SAAAjB,EAAAtB,KAAA,qCAAAoE,EAAAjE,MAAAH,KAAAI,YAAA,KAAAG,IAAA,SAAAC,MAAA,WAqBI,OACEC,EAAA,yBACEA,EAAA,kCAEAA,EAAA,cAACkE,EAAA,EAAD,CACEC,SAAO,EACPC,KAAK,OACLC,UAAU,aACVC,QAAS/E,KAAKiE,mBAJhB,oBASAxD,EAAA,cAACuE,EAAA,EAAD,CAASC,UAAQ,IAEjBxE,EAAA,cAACC,EAAA,EAAKd,MAAN,KACGI,KAAK+D,MAAMC,OAAOkB,IAAI,SAAApE,GACrB,OAAOL,EAAA,cAAC0E,EAAD,CAAO5E,IAAKO,EAAMsE,GAAItE,MAAOA,YAtChDwC,EAAA,CAAgCpC,6DCPnBmE,EAAb,SAAAxF,GAAA,SAAAwF,IAAA,OAAAvF,OAAAC,EAAA,EAAAD,CAAAE,KAAAqF,GAAAvF,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAuF,GAAAlF,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAAuF,EAAAxF,GAAAC,OAAAQ,EAAA,EAAAR,CAAAuF,EAAA,EAAA9E,IAAA,SAAAC,MAAA,WAEI,OAAOC,EAAA,yCAFX4E,EAAA,CAA8BnE,0BCIjBoE,EAAb,SAAAzF,GAAA,SAAAyF,IAAA,IAAA/B,EAAAC,EAAA1D,OAAAC,EAAA,EAAAD,CAAAE,KAAAsF,GAAA,QAAA7B,EAAArD,UAAAsD,OAAAC,EAAA,IAAAC,MAAAH,GAAAI,EAAA,EAAAA,EAAAJ,EAAAI,IAAAF,EAAAE,GAAAzD,UAAAyD,GAAA,OAAAL,EAAA1D,OAAAG,EAAA,EAAAH,CAAAE,MAAAuD,EAAAzD,OAAAI,EAAA,EAAAJ,CAAAwF,IAAAxB,KAAA3D,MAAAoD,EAAA,CAAAvD,MAAAkC,OAAAyB,MAIEI,MAA0B,CACxBhD,KAAM,GACNE,YAAa,GACbsE,gBAAgB,GAPpB/B,EAUEgC,iBAAmB,SAACC,GAClBjC,EAAKe,SAAS,CAAExD,KAAM0E,EAAMC,OAAOlF,SAXvCgD,EAcEmC,wBAA0B,SAACF,GACzBjC,EAAKe,SAAS,CAAEtD,YAAawE,EAAMC,OAAOlF,SAf9CgD,EAkBEoC,aAlBF,eAAAC,EAAA/F,OAAAuE,EAAA,EAAAvE,CAAA2B,EAAAC,EAAA4C,KAkBiB,SAAAhD,EAAOmE,GAAP,IAAA3E,EAAA,OAAAW,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UACb2D,EAAMK,iBADOlE,EAAAC,KAAA,EAIN2B,EAAKO,MAAMhD,MAASyC,EAAKO,MAAM9C,YAJzB,CAAAW,EAAAE,KAAA,eAKT2C,MAAM,2CALG7C,EAAAS,OAAA,wBASXmB,EAAKuC,gBAAe,GATTnE,EAAAE,KAAA,EAUSU,EAAY,CAC9BzB,KAAMyC,EAAKO,MAAMhD,KACjBE,YAAauC,EAAKO,MAAM9C,cAZf,OAULH,EAVKc,EAAAO,KAeXJ,QAAQC,IAAI,sBAAuBlB,GAEnC2D,MAAM,sBAjBK7C,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAA4C,GAAA5C,EAAA,SAmBX6C,MAAM,8BAAgC7C,EAAA4C,GAAEE,SAnB7B,eAAA9C,EAAAC,KAAA,GAqBX2B,EAAKuC,gBAAe,GArBTnE,EAAAoE,OAAA,6BAAApE,EAAAW,SAAAjB,EAAA,wBAlBjB,gBAAAmB,GAAA,OAAAoD,EAAA1F,MAAAH,KAAAI,YAAA,GAAAoD,EAAA,OAAA1D,OAAAO,EAAA,EAAAP,CAAAwF,EAAAzF,GAAAC,OAAAQ,EAAA,EAAAR,CAAAwF,EAAA,EAAA/E,IAAA,iBAAAC,MAAA,SA2CiB+E,GACbvF,KAAKuE,SAAS,CACZgB,qBA7CN,CAAAhF,IAAA,SAAAC,MAAA,WAkDI,OACEC,EAAA,yBACEA,EAAA,4CAEAA,EAAA,cAACwF,EAAA,EAAD,CAAMC,SAAUlG,KAAK4F,cACnBnF,EAAA,cAACwF,EAAA,EAAKE,MAAN,KACE1F,EAAA,mCACAA,EAAA,uBACE2F,YAAY,aACZ5F,MAAOR,KAAK+D,MAAMhD,KAClBsF,SAAUrG,KAAKwF,oBAGnB/E,EAAA,cAACwF,EAAA,EAAKE,MAAN,KACE1F,EAAA,0CACAA,EAAA,uBACE2F,YAAY,oBACZ5F,MAAOR,KAAK+D,MAAM9C,YAClBoF,SAAUrG,KAAK2F,2BAGlB3F,KAAKsG,mBAvEhB,CAAA/F,IAAA,eAAAC,MAAA,WA8EI,OACEC,EAAA,cAACkE,EAAA,EAAD,CAAQ4B,QAASvG,KAAK+D,MAAMwB,eAAgBiB,KAAK,UAAjD,cA/ENlB,EAAA,CAAiCpE,iBCFZuF,mLAEjB,OACEC,EAAAhF,EAAAiF,cAAA,WACED,EAAAhF,EAAAiF,cAACC,EAAA,EAAD,CAASC,MAAO,CAAEC,QAAS,WAAaC,UAAQ,GAC9CL,EAAAhF,EAAAiF,cAACK,EAAA,EAAD,CAAMC,WAAS,EAACC,WAAS,EAACC,cAAc,UACtCT,EAAAhF,EAAAiF,cAACK,EAAA,EAAKI,IAAN,KACEV,EAAAhF,EAAAiF,cAACK,EAAA,EAAKK,OAAN,CAAaC,MAAO,IAClBZ,EAAAhF,EAAAiF,cAACY,EAAA,EAAD,KACGvH,KAAKwH,eAELxH,KAAKyH,mEAWpB,OACEf,EAAAhF,EAAAiF,cAACe,EAAA,EAAD,KACEhB,EAAAhF,EAAAiF,cAACe,EAAA,EAAKC,KAAN,CAAW5G,KAAK,QACd2F,EAAAhF,EAAAiF,cAACY,EAAA,EAAD,CAAMK,GAAG,KAAT,wDAON,OACElB,EAAAhF,EAAAiF,cAACkB,EAAA,EAAD,KACEnB,EAAAhF,EAAAiF,cAACkB,EAAA,EAAD,CAAOC,KAAK,iBAAiBC,OAAK,EAACC,UAAW1C,IAE9CoB,EAAAhF,EAAAiF,cAACkB,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAW1E,IAEjCoD,EAAAhF,EAAAiF,cAACkB,EAAA,EAAD,CAAOG,UAAW3C,YAtCO4C,aCEbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,kECXNC,IAASC,OAAO9B,EAAAhF,EAAAiF,cAAC8B,EAAD,MAASC,SAASC,eAAe,SDkI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.aa59405f.chunk.js","sourcesContent":["import * as React from 'react'\nimport { Card } from 'semantic-ui-react'\nimport { GroupModel } from '../types/GroupModel'\n\ninterface GroupCardProps {\n  group: GroupModel\n}\n\ninterface GroupCardState {\n}\n\nexport class Group extends React.PureComponent<GroupCardProps, GroupCardState> {\n\n  render() {\n    return (\n      <Card>\n        <Card.Content>\n          <Card.Header>\n            {this.props.group.name}\n          </Card.Header>\n          <Card.Description>{this.props.group.description}</Card.Description>\n        </Card.Content>\n      </Card>\n    )\n  }\n}\n","export const apiEndpoint = 'https://2mnrln8dcg.execute-api.us-east-1.amazonaws.com/dev/groups'\n","import { GroupModel } from '../types/GroupModel'\nimport { apiEndpoint } from '../config'\nimport { GroupUploadInfo } from '../types/GroupUploadInfo'\n\nexport async function getGroups(): Promise<GroupModel[]> {\n  console.log('Fetching groups')\n\n  const response = await fetch(`${apiEndpoint}/groups`)\n  const result = await response.json()\n\n  return result.items\n}\n\nexport async function createGroup(newGroup: GroupUploadInfo): Promise<GroupModel> {\n\n  const reply = await fetch(`${apiEndpoint}/groups`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      name: newGroup.name,\n      description: newGroup.description\n    })\n  })\n  const result = await reply.json();\n  return result.newItem\n}\n","import * as React from 'react'\nimport { GroupModel } from '../types/GroupModel'\nimport { Group } from './Group'\nimport { getGroups } from '../api/groups-api'\nimport { Card, Button, Divider } from 'semantic-ui-react'\nimport { History } from 'history'\n\ninterface GroupsListProps {\n  history: History\n}\n\ninterface GroupsListState {\n  groups: GroupModel[]\n}\n\nexport class GroupsList extends React.PureComponent<GroupsListProps, GroupsListState> {\n  state: GroupsListState = {\n    groups: []\n  }\n\n  handleCreateGroup = () => {\n    this.props.history.push(`/groups/create`)\n  }\n\n  async componentDidMount() {\n    try {\n      const groups = await getGroups()\n      this.setState({\n        groups\n      })\n    } catch (e) {\n      alert(`Failed to fetch groups: ${e.message}`)\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Groups</h1>\n\n        <Button\n          primary\n          size=\"huge\"\n          className=\"add-button\"\n          onClick={this.handleCreateGroup}\n        >\n          Create new group\n        </Button>\n\n        <Divider clearing />\n\n        <Card.Group>\n          {this.state.groups.map(group => {\n            return <Group key={group.id} group={group} />\n          })}\n        </Card.Group>\n      </div>\n    )\n  }\n}\n","import * as React from 'react'\n\ninterface NotFoundProps {\n}\n\ninterface NotFoundState {\n}\n\nexport class NotFound extends React.PureComponent<NotFoundProps, NotFoundState> {\n  render() {\n    return <h1>Not Found</h1>\n  }\n}\n","import * as React from 'react'\nimport { Form, Button } from 'semantic-ui-react'\nimport { createGroup } from '../api/groups-api'\n\ninterface CreateGroupProps {}\n\ninterface CreateGroupState {\n  name: string\n  description: string\n  uploadingGroup: boolean\n}\n\nexport class CreateGroup extends React.PureComponent<\n  CreateGroupProps,\n  CreateGroupState\n> {\n  state: CreateGroupState = {\n    name: '',\n    description: '',\n    uploadingGroup: false\n  }\n\n  handleNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ name: event.target.value })\n  }\n\n  handleDescriptionChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ description: event.target.value })\n  }\n\n  handleSubmit = async (event: React.SyntheticEvent) => {\n    event.preventDefault()\n\n    try {\n      if (!this.state.name || !this.state.description) {\n        alert('Name and description should be provided')\n        return\n      }\n\n      this.setUploadState(true)\n      const group = await createGroup({\n        name: this.state.name,\n        description: this.state.description\n      })\n\n      console.log('Created description', group)\n\n      alert('Group was created!')\n    } catch (e) {\n      alert('Could not upload an image: ' + e.message)\n    } finally {\n      this.setUploadState(false)\n    }\n  }\n\n  setUploadState(uploadingGroup: boolean) {\n    this.setState({\n      uploadingGroup\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Upload new group</h1>\n\n        <Form onSubmit={this.handleSubmit}>\n          <Form.Field>\n            <label>Name</label>\n            <input\n              placeholder=\"Group name\"\n              value={this.state.name}\n              onChange={this.handleNameChange}\n            />\n          </Form.Field>\n          <Form.Field>\n            <label>Description</label>\n            <input\n              placeholder=\"Group description\"\n              value={this.state.description}\n              onChange={this.handleDescriptionChange}\n            />\n          </Form.Field>\n          {this.renderButton()}\n        </Form>\n      </div>\n    )\n  }\n\n  renderButton() {\n    return (\n      <Button loading={this.state.uploadingGroup} type=\"submit\">\n        Create\n      </Button>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport { GroupsList } from './components/GroupsList'\nimport { BrowserRouter as Router, Link, Route, Switch } from 'react-router-dom'\nimport { Grid, Menu, Segment } from 'semantic-ui-react'\nimport { NotFound } from './components/NotFound'\nimport { CreateGroup } from './components/CreateGroup'\n\nexport interface AppProps {}\nexport interface AppState {}\n\nexport default class App extends Component<AppProps, AppState> {\n  render() {\n    return (\n      <div>\n        <Segment style={{ padding: '8em 0em' }} vertical>\n          <Grid container stackable verticalAlign=\"middle\">\n            <Grid.Row>\n              <Grid.Column width={16}>\n                <Router>\n                  {this.generateMenu()}\n\n                  {this.generateCurrentPage()}\n                </Router>\n              </Grid.Column>\n            </Grid.Row>\n          </Grid>\n        </Segment>\n      </div>\n    )\n  }\n\n  generateMenu() {\n    return (\n      <Menu>\n        <Menu.Item name=\"home\">\n          <Link to=\"/\">Home</Link>\n        </Menu.Item>\n      </Menu>\n    )\n  }\n\n  generateCurrentPage() {\n    return (\n      <Switch>\n        <Route path=\"/groups/create\" exact component={CreateGroup} />\n\n        <Route path=\"/\" exact component={GroupsList} />\n\n        <Route component={NotFound} />\n      </Switch>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}