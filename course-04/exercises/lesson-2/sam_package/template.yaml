AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  lesson2

  Sample SAM Template for lesson2
  
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Api:
    # enable CORS; to make more specific, change the origin wildcard
    # to a particular domain name, e.g. "'www.example.com'"
    Cors:
      AllowMethods: "'*'"
      AllowHeaders: "'*'"
      AllowOrigin: "'*'"
  Function:
    Timeout: 3

Resources:
  DynamoCreateFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: dynamocreate/
      Handler: index.handler
      Runtime: nodejs12.x
      Policies:
      - CloudWatchPutMetricPolicy: {}
      - DynamoDBCrudPolicy: 
            TableName: 'Groups'
      Environment: 
            Variables:
                    DB_USER: 'admin'
                    DB_PASSWORD: 'password'
                    DB_HOSTNAME: 'jdbc:mysql://localhost/orders'
                    GROUPS_TABLE: 'Groups'
      Events:
        dynamocreate:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /groups
            Method: POST
            RestApiId: !Ref ApiGatewayApi

  GetScanFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: getGroups/
      Handler: index.handler
      Runtime: nodejs12.x
      Policies:
      - CloudWatchPutMetricPolicy: {}
      - DynamoDBReadPolicy: 
            TableName: 'Groups'
      Environment: 
            Variables:
                    DB_USER: 'admin'
                    DB_PASSWORD: 'password'
                    DB_HOSTNAME: 'jdbc:mysql://localhost/orders'
                    GROUPS_TABLE: 'Groups'
      Events:
        getScanEvent:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /groups
            Method: GET
            RestApiId: !Ref ApiGatewayApi

  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev
Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  HelloWorldApi:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
  HelloWorldFunction:
    Description: "Hello World Lambda Function ARN"
    Value: !GetAtt GetScanFunction.Arn
  HelloWorldFunctionIamRole:
    Description: "Implicit IAM Role created for Hello World function"
    Value: !GetAtt GetScanFunctionRole.Arn
